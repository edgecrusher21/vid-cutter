#+TITLE: vid-cutter
* Work in progress
  This is a work in progress and one of my first major project. There are a few gaping bugs I am fully aware of
* About
  vid-cutter is a simple tool which converts mp4 files ripped from youtube videos and cuts them up into mp3 files with metadata added. Metadata is extracted from a simple csv file and added to a corresponding mp3 file encoded by ffmpeg. This is a personal project which I use for rare EPs, LPs and concerts I find on youtube. I plan on expanding this for other forms of media, such as TV/Video scenes, podcast/livestream clips and individual PPV fights.
* CSV File Template
  #+begin_src org
  "song_name[0]", start_time[0], end_time[0] 
  "song_name[1]", start_time[1], end_time[1]
  "song_name[2]", start_time[2], end_time[2]
  _ARTIST_NAME, "artist_name"
  _ALBUM_NAME, "album_name"
  _YEAR, year
#+end_src

  All values starting with _ _LIKE_THIS must be in the first column of the row, otherwise you may have issues with corresponding metadata being added. " " should be added when specified, especially if the value requires a comma. Don't worry about spacing after a "," seperator, they will not appear within the metadata so no worries with making your file look pretty inside your favourite text editor.
* Examples

#+begin_src
"To Defy The Laws Of Tradition", 00:00, 05:53
"To Defy The Laws Of Tradition (Continued)", 05:53, 08:09
"Here Come The Bastards", 08:09, 14:35
"Those Damned Blue-Collar Tweekers / Bob", 14:35, 27:09
"My Name Is Mud", 27:09, 31:40
"Jerry Was A Race Car Driver", 31:40, 35:20
"The Air Is Getting Slippery", 35:20, 39:26
"Nature Boy", 39:26, 47:53
"Harold Of The Rocks", 47:53, 58:26
"Harold Of The Rocks (Continued)", 0:58:26, 1:00:47
_ARTIST_NAME, "Primus"
_ALBUM_NAME, "Live at Woodstock 94"
_YEAR, 1994
#+end_src
Here, I save this as primus-woodstock94.csv, then I pass the corresponding youtube url + csv file to the vidCutter program as arguments
#+begin_src
./vidCutter https://www.youtube.com/watch\?v\=v-HUK8qR9QA primus-woodstock94.csv
#+end_src
The program will download the youtube video, process the csv file then confirm if the data shown properly. It will then proceed to add given metadata to each splice then output as an mp3 file. The files should be saved to a folduer structure as $(artistName)/$(albumName) 
#+begin_src
"Enter Sandman", 0:59, 6:24
"Fade to Black", 14:14, 21:45
"Creeping Death", 6:24, 14:14
_ARTIST_NAME, "Metallica"
_ALBUM_NAME, "Monsters of Rock"
_YEAR, 1991

#+end_src
Now save csv file (for this example, metallica-moscow.csv) then run the program with the youtube url + csv file given as arguments
#+begin_src
./vidCutter https://www.youtube.com/watch\?v\=eng4OTDqtoM metallica-moscow.csv
#+end_src
Note how you can partially rip from a video

Another example, with just a single song
#+begin_src
"Take On Me", 0:02, 3:40
_ARTIST_NAME, "a-ha"
_ALBUM_NAME, "Hunting High and Low"
_YEAR, 1985
#+end_src
with file saved as "aha.csv"..
#+begin_src
./vidCutter https://www.youtube.com/watch\?v\=djV11Xbc914 aha.csv
#+end_src
We can now save with a single song. This is useful to cut silence, unwanted sounds and unrelated intros or outros.
* Running vid-cutter
  Please note this is writen and tested using c++ 17(previously 11), gcc 8.2.1 and on Manjaro Linux. It should run fine on most Unix-like OS but may have issues compiling on Windows.

Ensure you also have the following installed:
#+begin_src org
-FFmpeg
-Youtube-dl
#+end_src
** To Compile
  #+begin_src sh
  make
#+end_src
** To Run
#+begin_src sh
./vidcutter [youtube-url] [csv file]
#+end_src
* Licence
  WTFPL for now
